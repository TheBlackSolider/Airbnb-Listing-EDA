# -*- coding: utf-8 -*-
"""Airbnb Listing EDA Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10wiAB1LZUcM8fHco_dK9SnoER5vhkyjH
"""

# Install Pandas to use it below

!pip install pandas

# Now let's import the library

 import pandas as pd

# Put the Path here for the spicefic file

df = pd.read_csv('/content/listings (2).csv')

# To see a small info about our data

df.info

# To see fisrt 5 Rows in our data

df.head()

# To see last 10 Rows in our data

df.tail(10)

# To Know our data shape
df.shape

"""You can see we've 1130 rows and 18 columns

"""

# To see our columns name

df.columns

# A brief statistacl info about our data

df.describe()

# We need to see all the data uniqe and if there's any boolen data or duplicate data

df.describe(include=['object','bool'])

# To see how many null data do we have

df.isnull().sum()

# To see our data type

df.dtypes

# Install the numpy library

!pip install numpy

# Import the library

import numpy as np

# Impute missing values with strategy
for col in df.select_dtypes(include=[np.number]):
    df[col] = df[col].fillna(df[col].mean())

for col in df.select_dtypes(include=[object]):
    df[col] = df[col].fillna(df[col].mode().iloc[0])

# Print DataFrame after handling missing values
print("\nDataFrame after handling missing values:")
print(df)

# After handeling with the missing values we've still have column with null but we will drop it later because we don't need it in our analysis

df.isnull().sum()

# We use apply fuction here

df.apply(np.max)

# We use groupby fuction here

df.groupby(['room_type'])[['price','number_of_reviews']].describe()

# We droped this column cuz it's has a null values and we don't need it in our analysis

df = df.drop('neighbourhood_group', axis=1)

df

# Here we use Cross Tabuliation to see what is the relation between availability_365 and room_type

pd.crosstab(df['room_type'],df['availability_365'])

# Another way to see the relation between two things you compared is Pivot table and it's really usefull

df.pivot_table(values='availability_365', index=['room_type'], aggfunc='count')

"""see there's 648 available and living in entire home and 6 available with living in Shared room
many of them didn't love the shared room

"""

# install the matplotlib for using graphs

!pip install matplotlib

# install the seaborn for using graphs

!pip install seaborn

# import the library

import matplotlib.pyplot as plt

# import the library

import seaborn as sns

# Here we use Cross Tabuliation to see what is the relation between availability_365 and room_type

# We use marigins to see the total of each row and category

pd.crosstab(df['availability_365'],df['room_type'], margins=True)

# Here we graph a countplot to see our data the room_type and number_of_reviews how the room_type will effect on number_of_reviews

sns.countplot(x = "room_type", hue = 'number_of_reviews', data=df)

"""since we've a lot data in  number_of_reviews that's what happend so we try uisng another way to graph or choose another category"""

# we choise some featuers here to study

features = ['room_type', 'number_of_reviews']

# We use figsize to let the shape bigger

df[features].hist(figsize=(10,5))

"""This histo show us aa lot of data in coulmn 0 that's mean number_of_reviews between 0 -200 is a lot and all aplly in room_type after 200 the numbers decrease"""

# We use another way to graph and take this time the density kind this will show us the data with better understand

df[features].plot(kind = 'density', subplots = True , layout = (1,2), sharex = False)

"""see the shpe it's looks like skewed left or the data in the left side and espasily between 0-200 and this is the density of it"""

# We try to compare the price column with number_of_reviews and room_type by using denist kind graph

sns.distplot(df['price'])

"""see the graph still has a skewed left shape and it's close to be normal distribution but it's not and see all the price between 0-500 is a lot depend on number_of_reviews and room_type"""

# We use box plot for more understand and analysis

sns.boxplot(df['price'])

"""see this is boxplot for price and see they are between 0 - 500 and see the median is shonw but we've what is greater than 25% of the data after price 500 but all the most between 0 - 500 and you can calculate the IQR here to see two priskers and they show the data is extreme"""

# We use box plot for more understand and analysis

sns.boxplot(df['room_type'])

"""see this is boxplot for room_type and see they are between private and entire home and see the median is shonw but we've what is greater than 50% of the data in private and shared and you can calculate the IQR here to see one priskers and they show the data is not extreme"""

# We use box plot for more understand and analysis

sns.boxplot(df['number_of_reviews'])

"""see this is boxplot for number_of_reviews and see they are between 0 - 200 and see the median is shonw but we've what is less than 25% of the data after berfore 200 but all the most between 0 - 200 and you can calculate the IQR here to see one priskers and they show the data is
 not extreme
"""

# Here's another way to see the columns and show it by using violinplot shape

sns.violinplot(df['price'])

# Here's another way to see the columns and show it by using violinplot shape

sns.violinplot(df['room_type'])

# Here's another way to see the columns and show it by using violinplot shape

sns.violinplot(df['number_of_reviews'])

"""the explination of these all three types of graph similer to the explination of box plot but here we use another graph shape fo knowledage"""

# A breif statistacl info about my features

df[features].describe()

# Counts of values in price column

df['price'].value_counts()

# Counts of values in room_type column

df['room_type'].value_counts()

# Counts of values in number_of_reviews column

df['number_of_reviews'].value_counts()

# here we use two countplot to compare between the room_type and minimum_nights in general

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10,5))

sns.countplot(x='room_type', data=df, ax=axes[0])
sns.countplot(x='minimum_nights', data=df, ax=axes[1])

"""see first figure show you three coulmns for represnting the room_type columns and it's three you can see the first two is the highihest and the second figure show us the minimun_nights and you see it's ditributed between many values and it's obvous shraed room not coming with many night they live to spend many nights in private room or entire room"""

# Install plotly if you want to see a pie chart here we don't need pie chart in our abalysis

!pip install plotly

"""

*   List item

*   List item
*   List item


*   List item

"""

# Import the library

import plotly.express as px

# Select a smaller set of features (replace with your desired features)
selected_features = ['price', 'number_of_reviews', 'minimum_nights']
correlation_matrix = df[selected_features].corr()

 # Reduce figure size
plt.figure(figsize=(8, 4))
sns.heatmap(correlation_matrix, annot=True)

"""There seems to be a small negative association between "number_of_reviews" and "minimum_nights." This can be construed in several ways:
 Listings with a high number of reviews may cater to shorter stays, while those with longer minimum stays may be newer and have less reviews. It is also possible that the association is not significant.

There appears to be a weak positive association between "price" and "availability_365." This is rather counterintuitive, as one would anticipate less available items (lower availability_365) to be priced higher due to increased demand. It's possible that this small association isn't significant, or that other factors influence both price and availability.

There appears to be a significant positive link between "number_of_reviews" and "price." This means that listings with more reviews are likely to be priced higher. This could be due to customers' willingness to pay extra for listings that have a demonstrated track record of providing great experiences.
There is also a positive relationship between "minimum_nights" and "price." This could indicate that longer stays are priced higher, possibly due to increased demand or customers' willingness to pay more for longer stays.
"""

# We plot a scatter plot to see how shape of our data will be shown between price and number_of_reviews

plt.scatter(df['price'], df['number_of_reviews'])

"""There is a cluster of postings with few reviews and a wide variety of pricing. This could be caused by various circumstances, including:
New listings that have not yet received many reviews.
Listings with distinguishing features or facilities attract a premium price, independent of review quantity.
There are also listings with a large number of reviews over a range of rates. This implies that, while reviews are significant, other criteria such as location, room type, and amenities influence price.
"""

# We do here some of joint plot between the scatter and hist to our observation

sns.jointplot(x = 'price', y= 'number_of_reviews', data = df, kind = 'scatter')

"""The histogram on the right depicts the distribution of prices in your dataset. It looks to be right-skewed, with more listings at the lower end of the price range and fewer at the upper end. This is a common feature of price data.

The scatter plot shows the previously established positive link between price and the amount of reviews. Listings with a higher number of reviews are typically priced more. However, there is a substantial spread in the data points.
"""

# Another way to show the privous joint plot and this time with kde

sns.jointplot(x = 'price', y= 'number_of_reviews', data = df, kind = 'kde')

"""The concentration of density in the lower left quadrant implies a large number of listings with low review counts and a wide price range. This is consistent with earlier observations.
The KDE plot also shows the core density of the data points. The locations with the highest density tend to follow a diagonal pattern, indicating a positive relationship between price and number of reviews. Listings with more reviews are typically found in the upper price range.
However, the blurrier areas surrounding the center represent the distribution of data points, emphasizing the impact of other factors on price besides review count.
"""

# our data shape

df.shape

# We choose these as our features

selected_features = ['price', 'number_of_reviews', 'minimum_nights']

# This is gonna be show us a many plots like the corr and imagine the corr in the privous code this is the same but in plot instaed of heatmap

sns.pairplot(df[selected_features])

"""Listings with more reviews tend to have shorter minimum stays, which could indicate consumer preference.
Surprisingly, greater prices correlate with higher availability, contrary to predictions.
Listings with more reviews are priced higher, most likely due to perceived quality, as are longer stays, maybe due to increased demand.
and be attention to graph when corll = 1
"""

# Using lmplot

sns.lmplot(x='number_of_reviews', y='price', data=df, hue='number_of_reviews')

# This can show intriguing tendencies, such as whether the price-review link is stronger for specific types of rooms.

sns.lmplot(x='number_of_reviews', y='price', data=df, hue='room_type')

"""The plot shows a positive association between price and quantity of reviews. This is consistent with your past findings: postings with more reviews tend to be priced higher.
The regression line's rising slope illustrates this trend.

The data points are spread out throughout the regression line, emphasizing the relationship's unpredictability. Not every listing with a large number of reviews has the highest price, and vice versa. Aside from the quantity of reviews, several other criteria determine the pricing.
"""

# This will generate a scatter plot of price versus number of reviews, along with a regression line. This can help to visualize the overall relationship between these features.

sns.lmplot(x='number_of_reviews', y='price', data=df)

# Here we compare between price and two diffrent category

_, axes = plt.subplots(nrows=1, ncols=2, figsize=(10,5))

sns.boxplot(x='price', y='number_of_reviews', data=df, ax=axes[0])
sns.violinplot(x='price',y='minimum_nights',  data=df, ax=axes[1])

pd.crosstab(df['minimum_nights'],df['number_of_reviews']).T

df.groupby(['minimum_nights'])['number_of_reviews'].agg([np.mean]).sort_values(by = 'mean', ascending = False)

# install the sklearn

!pip install sklearn

# Import our library

from sklearn.manifold import TSNE

from sklearn.preprocessing import StandardScaler

df.columns

df

# I drop there solimns because I don't need it with my tsne algorithem and to reduce the data for it espacilly it's not effect to much

x = df.drop(['name','host_name','neighbourhood','license','room_type', 'last_review'],axis=1)

x

# here I use the tsne algorithem and transform my data to fit with it

x_scl = StandardScaler().fit_transform(x)

# I called an object from tsne and use it and prepare my data for tsne algorithem

tsne = TSNE()
x_red = tsne.fit_transform(x_scl)

# changed to be numpy array

x_red

x_red.shape

plt.scatter(x_red[:,0], x_red[:,1], alpha =0.5)

"""illustrates an t-SNE scatter plot, a dimensionality reduction technique for visualizing high-dimensional data in two or three dimensions. However, in order to appreciate the unique insights from this plot, you must first understand the context of your data and the features utilized to reduce dimensionality."""

x['number_of_reviews'].mean()

import matplotlib.pyplot as plt

# Assuming x_red is your numpy array containing coordinates
# Assuming df is your DataFrame containing the 'price' column

# Define a condition based on the price column
threshold = 50  # Define your threshold here
condition = df['number_of_reviews'] > threshold  # For example, color points where price > threshold in one color, else another color

# Define colors based on the condition
colors = ['orange' if condition[i] else 'blue' for i in range(len(condition))]

# Scatter plot with colors based on the condition
plt.scatter(x_red[:, 0], x_red[:, 1], c=colors, alpha=0.5)
plt.show()

"""The scatter figure appears to separate data points into two color categories, most likely reflecting price thresholds.
ones with more reviews over the threshold (orange) are compared against ones with fewer reviews (blue).

When examining a given review count threshold, this graphic might assist in determining whether there is a relationship between price and number of reviews.
High Review Listings: The orange points (listings with more reviews than the threshold) may suggest that listings with a strong review history are priced in a specified range or higher.
"""

x['price'].mean()

import matplotlib.pyplot as plt

# Assuming x_red is your numpy array containing coordinates
# Assuming df is your DataFrame containing the 'price' column

# Define a condition based on the price column
threshold = 184  # Define your threshold here
condition = df['price'] > threshold  # For example, color points where price > threshold in one color, else another color

# Define colors based on the condition
colors = ['orange' if condition[i] else 'blue' for i in range(len(condition))]

# Scatter plot with colors based on the condition
plt.scatter(x_red[:, 0], x_red[:, 1], c=colors, alpha=0.5)
plt.show()

x['minimum_nights'].mean()

import matplotlib.pyplot as plt

# Assuming x_red is your numpy array containing coordinates
# Assuming df is your DataFrame containing the 'price' column

# Define a condition based on the price column
threshold = 25  # Define your threshold here
condition = df['minimum_nights'] > threshold  # For example, color points where price > threshold in one color, else another color

# Define colors based on the condition
colors = ['orange' if condition[i] else 'blue' for i in range(len(condition))]

# Scatter plot with colors based on the condition
plt.scatter(x_red[:, 0], x_red[:, 1], c=colors, alpha=0.5)
plt.show()

"""we can see here there's a lot of data when minimum night > 25 they prefer to be not shared room and also we can see the orange show us there's some pepople comes with > 25 nights depend on price and room type and that why the number of reveiw got effected

Review vs. Minimum Nights Association: There appears to be a slight negative relationship between the number of reviews and minimum nights. Listings with more reviews have shorter minimum stays, indicating a preference among customers.

Price vs. Availability: Unlike expectations, there is a weak positive correlation between price and availability_365. This shows that higher costs are associated with increased availability, which could reflect other factors impacting demand.
pricing vs. Number of Reviews: There is a strong positive correlation between the number of reviews and pricing. Listings with more reviews are likely to be priced higher, potentially reflecting customers' willingness to pay more for highly rated rooms.


Minimum Nights vs. Price: Similarly, there's a positive relationship between minimum nights and price. Longer stays tend to be priced higher, indicating potential demand or willingness among customers to pay more for extended stays.
pricing vs. Number of Reviews: There is a strong positive correlation between the number of reviews and pricing. Listings with more reviews are likely to be priced higher, potentially reflecting customers' willingness to pay more for highly rated rooms.
Minimum Nights versus Price: Similarly, there is a positive correlation between minimum nights and price. Longer stays are typically priced higher, indicating that clients may be willing to spend more for lengthier visits.
"""

